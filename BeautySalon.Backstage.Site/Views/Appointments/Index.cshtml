@model IEnumerable<BeautySalon.Backstage.Site.Models.ViewModels.AppointmentVm>

@{
    ViewBag.Title = "Index";
}
<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>預約列表</title>
    <script src="https://cdn.jsdelivr.net/npm/vue@3.2.47/dist/vue.global.prod.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        /*共用*/
        ul.dropdown-menu.show {
            margin-top: 8px;
            border: none;
            border-radius: 0px;
            background-color: rgb(197,207,178,1);
        }

        /* 下拉菜單 */
        .dropdown-menu {
            background-color: #C5CFB2;
            padding: 0px;
            margin: 7px 5px 5px 5px;
            position: static;
            top: 90%;
            left: 0;
            min-width: 110px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        /* 下拉菜單項目 */
        .dropdown-item {
            color: #64695B;
            font-weight: bold;
            padding: 10px;
            font-size: medium;
            display: block;
            margin: 1px;
            width: 90%;
        }

            .dropdown-item:hover {
                background-color: rgb(165, 173, 149,0.5);
                border-radius: 20px;
            }

        h3 {
            margin: 10px;
            padding: 10px 0 0 0 !important;
            font-weight: bold !important;
            text-align: center;
            color: #776B5D !important;
        }

        /*共用*/
        .main {
            padding: 30px;
            border-radius: 18px;
            margin: 20px 0px 50px 0px !important;
        }

        /*列表操作欄*/
        .search-bar {
            margin-bottom: 10px !important;
            display: flex;
            align-items: center;
            margin: 20px;
            width: 800px !important;
        }

        .search-input, .search-bar {
            display: flex; /* 將查詢輸入框和按鈕放在同一行 */
            white-space: nowrap;
        }

        .statusFilter {
            min-width: 100px;
            font-weight: bold !important;
            color: #776B5D !important;
            display: flex; /* 將標籤和下拉選單放在同一行 */
            align-items: center; /* 垂直置中 */
        }

        .selectedStatus {
            width: 120px !important;
            margin-right: 0px !important;
            margin-left: 20px !important;
        }

        .form-control,
        .selectedStatus {
            width: 500px;
            /*max-width: 100%;*/
            /*width: 300px !important;*/
            height: 100%;
            min-height: 40px; /* 設定最小高度，根據需要調整 */
            box-sizing: border-box; /* 确保 padding 和 border 不会增加元素的总宽度 */
            color: #A0937D !important; /* 你可以根據需求修改顏色 */
            margin-right: 20px;
        }

            /*列表操作欄*/
            .form-control::placeholder {
                color: #8E806A !important; /* 設置 placeholder 文字顏色為灰色 */
                opacity: 1; /* 確保顏色應用於 placeholder */
                font-size: small;
            }

        .btn {
            background-color: rgb(133,139,120,0.5) !important;
            color: #fefefe !important;
            border-radius: 10px !important;
            margin: 5px;
            font-weight: bold !important;
        }

        /*資料欄*/
        .btn-custom {
            display: flex;
            justify-content: center !important;
            align-items: center; /* 垂直置中 */
            white-space: nowrap; /* 防止文字換行 */
            text-align: center !important;
        }

        /*列表操作欄*/
        .table {
            margin: 25px !important;
            width: 95% !important;
            border-collapse: separate;
            border-spacing: 2px 2px; /* 設置水平間隔為 15px，垂直間隔為 10px */
            border-radius: 10px !important;
            overflow: hidden;
            box-sizing: border-box !important;
            vertical-align: middle !important; /* 垂直居中 */
        }

        /*列表操作欄*/
        .table-container {
            /*max-height: 500px;*/
            /*overflow: auto;*/ /* 添加纵向滚动条 */
            display: block;
            width: 100%;
            border-radius: 10px !important;
        }
        /*列表操作欄*/
        .table thead th {
            background-color: #CDD5C6 !important;
            text-align: center;
            padding: 10px;
            color: #776B5D !important;
            margin: 2px !important;
            white-space: nowrap;
        }

        /*列表操作欄*/
        .table td {
            text-align: left;
            height: 60px;
            color: rgb(96, 63, 38,0.8) !important;
            padding-left: 20px !important;
            font-weight: bold;
            background-color: rgb(247, 249, 242,0.7) !important;
            white-space: nowrap;
        }
        /*資料欄*/
        .col-md-3, .col-md-5 {
            margin-top: 40px !important;
            color: rgb(96,63,38,0.8);
        }

        /*列表操作欄*/
        .operate {
            width: 100% !important;
            height: 70px;
            display: flex; /* 使用 Flexbox */
            justify-content: center; /* 水平置中 */
            align-items: center; /* 垂直置中 */
            white-space: nowrap; /* 防止文字換行 */
        }


        /*列表操作欄*/
        /*.table td.operate button {
            margin: 0 10px !important;*/ /* 按钮间距 */
        /*}*/

        .text-danger {
            min-height: 40px !important; /* 你可以根據錯誤訊息的高度進行調整 */
            display: block !important;
        }

        /* 分頁按鈕樣式 */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 20px;
            list-style-type: none;
        }

        .page-item {
            height: 40px; /* 設定固定高度 */
        }

        .pagination li {
            margin: 0 5px;
        }

        .pagination .page-link {
            color: #b8afa6;
            background-color: white;
            border: 1px solid #b8afa6;
            padding: 5px 12px;
            border-radius: 5px;
            cursor: pointer;
            height: 100%; /* 使 link 填滿整個 item */
        }

        .pagination .page-item.active .page-link {
            background-color: #b8afa6;
            color: white;
        }

        .pagination .page-link:hover {
            background-color: #b8afa6;
            color: white;
        }

        .pagination .disabled {
            opacity: 0.6;
            pointer-events: none;
        }

    </style>
</head>
<body>
    <div id="app" class="main">
        <h3>預約列表</h3>
        <div class="search-input d-flex justify-content-between align-items-center">

            <div class="search-bar">
                <input type="text" id="searchTerm" class="form-control" placeholder="請輸入查詢條件" v-model="searchTerm" />
                <button class="btn btn-search" v-on:click="searchAppointment">查詢</button>
            </div>

            <label for="statusFilter" class="statusFilter">
                篩選狀態 :
                <select id="statusFilter" v-model="selectedStatus" v-on:change="filterByStatus" class="form-control selectedStatus">
                    <option value="">全部</option>
                    <option value="1">已成立</option>
                    <option value="2">已取消</option>
                    @*<option value="3">未知</option>*@
                </select>
            </label>
        </div>



        <div class="table-container">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>訂單ID</th>
                        <th>明細ID</th>
                        <th>服務項目</th>
                        <th>員工暱稱</th>
                        <th>預約ID</th>
                        <th>預約起</th>
                        <th>預約迄</th>
                        <th>會員姓名</th>
                        <th>預約狀態</th>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @*<tr v-for="appointment in filteredAppointments" :key="appointment.AppointmentID">*@
                    <tr v-for="appointment in paginatedAppointments" :key="appointment.AppointmentID">
                        <td class="data">{{ appointment.OrderID}}</td>
                        <td class="data">{{ appointment.OrderDetailID}}</td>
                        <td class="data">{{ appointment.ServiceName}}</td>
                        <td class="data">{{ appointment.Nickname}}</td>
                        <td class="data">{{ appointment.AppointmentID}}</td>
                        @*<td class="data">{{ appointment.AppointmentStart}}</td>*@
                        <td class="data">{{ formatDate(appointment.AppointmentStart)}}</td>
                        @*<td class="data">{{ appointment.AppointmentEnd}}</td>*@
                        <td class="data">{{ formatDate(appointment.AppointmentEnd)}}</td>
                        <td class="data">{{ appointment.Name}}</td>
                        <td class="data" >
                            {{ appointment.AppointmentStatus === 1 ? '已成立' : appointment.AppointmentStatus === 2 ? '已取消' : '未知狀態' }}
                        </td>
                        <td class="data" style="display: flex; justify-content: center; align-items: center;">
                            @*<button class="btn btn-custom" onclick="cancelAppointment(appointment.AppointmentID)">取消</button>*@
                            <button class="btn btn-custom"
                                    v-if="appointment.AppointmentStatus === 1 && notPastOrToday(appointment.AppointmentStart)"
                                    v-on:click="cancelAppointment(appointment.AppointmentID)">
                                取消
                            </button>
                        </td>
                    </tr>
                </tbody>
            </table>

            <!-- 分頁 -->
            <ul class="pagination">
                <li :class="['page-item', { disabled: currentPage === 1 }]">
                    <span class="page-link" v-on:click="changePage(1)"><i class="fas fa-chevron-left"></i> 第一頁</span>
                </li>
                <li v-for="(page, index) in displayedPages" :key="index" :class="['page-item', { active: currentPage === page }]">
                    <span class="page-link" v-on:click="changePage(page)">
                        {{ page }}
                    </span>
                </li>
                <li :class="['page-item', { disabled: currentPage === totalPages }]">
                    <span class="page-link" v-on:click="changePage(totalPages)"><i class="fas fa-chevron-right"></i> 最末頁</span>
                </li>
            </ul>

        </div>

    </div>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
    const { createApp } = Vue;

    createApp({
        data() {
            return {
                searchTerm: '',
                selectedStatus: '',
                appointments: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model)),
                filteredAppointments: [],
                currentPage: 1,
                itemsPerPage: 10

            };
        },
        computed: {
            totalPages() {
                return Math.ceil(this.filteredAppointments.length / this.itemsPerPage);
            },
            paginatedAppointments() {
                const start = (this.currentPage - 1) * this.itemsPerPage;
                return this.filteredAppointments.slice(start, start + this.itemsPerPage);
            },
            displayedPages() {
                const pages = [];
                const maxPages = 7; // 最多顯示 7 頁

                if (this.totalPages <= maxPages) {
                    // 總頁數少於或等於最大頁數，顯示所有頁數
                    for (let i = 1; i <= this.totalPages; i++) {
                        pages.push(i);
                    }
                } else {
                    // 超過最大頁數，顯示部分頁碼並加上 '...'
                    if (this.currentPage > 4) {
                        pages.push(1);
                        if (this.currentPage > 5) pages.push('...');
                    }

                    // 顯示當前頁碼附近的頁碼
                    const startPage = Math.max(2, this.currentPage - 1);
                    const endPage = Math.min(this.totalPages - 1, this.currentPage + 1);
                    for (let i = startPage; i <= endPage; i++) {
                        pages.push(i);
                    }

                    if (this.currentPage < this.totalPages - 3) {
                        pages.push('...');
                        pages.push(this.totalPages);
                    }
                }

                return pages;
            }
        },

        created() {
            this.filteredAppointments = this.appointments;
        },
        methods: {
            changePage(page) {
                if (page < 1 || page > this.totalPages || page === '...') return; // 防止非法頁碼
                this.currentPage = page;
                // 在這裡添加其他邏輯，例如請求新數據等
            },

            filterByStatus() {
                this.filteredAppointments = this.appointments.filter(appointment => {
                    if (this.selectedStatus === '') return true; // 顯示所有預約
                    return appointment.AppointmentStatus == this.selectedStatus || (this.selectedStatus === '3' && appointment.AppointmentStatus !== 1 && appointment.AppointmentStatus !== 2);
                });
                this.currentPage = 1; // 篩選後重設為第一頁

            },

            searchAppointment() {
                this.filteredAppointments = this.appointments.filter(appointment => {
                    const matchesSearchTerm =
                        !this.searchTerm ||
                        appointment.Name.includes(this.searchTerm) ||
                        appointment.OrderID.toString().includes(this.searchTerm) ||
                        appointment.OrderDetailID.toString().includes(this.searchTerm) ||
                        appointment.AppointmentID.toString().includes(this.searchTerm) ||
                        appointment.AppointmentStart.toString().includes(this.searchTerm) ||
                        appointment.AppointmentEnd.toString().includes(this.searchTerm) ||
                        appointment.ServiceName.includes(this.searchTerm) ||
                        appointment.Nickname.includes(this.searchTerm);

                    const matchesStatus = this.selectedStatus === '' || appointment.AppointmentStatus == this.selectedStatus;

                    return matchesSearchTerm && matchesStatus;
                });
                this.currentPage = 1; // 篩選後重設為第一頁

            },
            onSearch() {
                this.searchAppointment();
                this.filterByStatus();
            },
            formatDate(dateString) {
                const date = new Date(dateString);
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hour = String(date.getHours()).padStart(2, '0');
                const minute = String(date.getMinutes()).padStart(2, '0'); // 新增分鐘部分
                return `${year}-${month}-${day} ${hour}:${minute}`;
            },

            cancelAppointment(appointmentID) {
                if (confirm('確定要取消這個預約嗎？')) {
                    // 這裡可以調用你的 API 來取消預約
                    axios.post('/Appointments/CancelAppointment', { appointmentId: appointmentID })
                        .then(response => {
                            // 假設成功後，你可以更新 appointments 列表
                            this.filteredAppointments = this.filteredAppointments.filter(a => a.AppointmentID !== appointmentID);
                            alert('預約已取消！');
                            location.reload();

                        })
                        .catch(error => {
                            console.error('取消預約時出錯:', error);
                            alert('取消預約失敗！');
                        });
                }
            },

             notPastOrToday(appointmentDate){
                const currentDate = new Date(); // 當前日期
                const appointmentDateObj = new Date(appointmentDate); // 將預約日期轉換為 Date 對象
                appointmentDateObj.setHours(0, 0, 0, 0); // 忽略時間部分，僅比較日期
                currentDate.setHours(0, 0, 0, 0); // 忽略當前日期的時間部分

                // 若預約日期 >= 當前日期，返回 true
                return appointmentDateObj >= currentDate;
            },
            goToPage(pageNumber) {
                if (pageNumber < 1 || pageNumber > this.totalPages) return;
                this.currentPage = pageNumber;
            },


        }
    }).mount('#app');


    </script>

</body>
</html>

